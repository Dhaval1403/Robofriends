{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","containers/App.js","registerServiceWorker.js","index.js"],"names":["IndividualCard","styled","div","Card","name","email","id","alt","src","style","color","CardList","robots","map","user","i","key","SearchBoxContainer","Input","input","SearchBox","searchfield","searchChange","type","placeholder","onChange","Wrapper","Heading","h1","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.2116df1f.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst IndividualCard = styled.div`\r\n\ttext-align: center;\r\n\tbox-shadow: 4px 4px 8px 0 rgba(0, 0, 0, 0.2);\r\n\tborder-width: 0.25rem;\r\n\tborder-radius: 0.5rem;\r\n\tbackground-image: linear-gradient(\r\n\t\tto right,\r\n\t\trgb(255, 200, 220),\r\n\t\trgb(255, 75, 150)\r\n\t);\r\n\tdisplay: inline-block;\r\n\tpadding: 1rem;\r\n\tmargin: 0.5rem;\r\n\tbackface-visibility: hidden;\r\n\ttransition: transform 0.25s ease-out;\r\n\ttransform: translateZ(0);\r\n`\r\n\r\nconst Card = ({ name, email, id }) => {\r\n\treturn (\r\n\t\t<IndividualCard>\r\n\t\t\t<img\r\n\t\t\t\talt='robots'\r\n\t\t\t\tsrc={`https://robohash.org/${id}?size=200x200&set=set3`}\r\n\t\t\t/>\r\n\t\t\t<div>\r\n\t\t\t\t<h2 style={{ color: '#fff' }}>{name}</h2>\r\n\t\t\t\t<p style={{ color: '#fff' }}>{email}</p>\r\n\t\t\t</div>\r\n\t\t</IndividualCard>\r\n\t)\r\n}\r\n\r\nexport default Card\r\n","import React from 'react'\r\nimport Card from './Card'\r\n\r\nconst CardList = ({ robots }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{robots.map((user, i) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<Card\r\n\t\t\t\t\t\tkey={i}\r\n\t\t\t\t\t\tid={robots[i].id}\r\n\t\t\t\t\t\tname={robots[i].name}\r\n\t\t\t\t\t\temail={robots[i].email}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)\r\n\t\t\t})}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default CardList\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst SearchBoxContainer = styled.div`\r\n\tpadding: 0.5rem;\r\n`\r\n\r\nconst Input = styled.input`\r\n\tpadding: 1rem;\r\n\tborder: 1px solid #fff;\r\n\tborder-radius: 8px;\r\n\tbackground-image: linear-gradient(\r\n\t\tto right,\r\n\t\trgb(255, 140, 198),\r\n\t\trgb(255, 100, 100)\r\n\t);\r\n\tcolor: #fff;\r\n`\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n\treturn (\r\n\t\t<SearchBoxContainer>\r\n\t\t\t<Input\r\n\t\t\t\ttype='search'\r\n\t\t\t\tplaceholder='Search Cute Monsters'\r\n\t\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</SearchBoxContainer>\r\n\t)\r\n}\r\n\r\nexport default SearchBox\r\n","import React, { Component } from 'react'\r\nimport CardList from '../components/CardList'\r\nimport SearchBox from '../components/SearchBox'\r\nimport styled from 'styled-components'\r\nimport './App.css'\r\n\r\nconst Wrapper = styled.div`\r\n\ttext-align: center;\r\n`\r\n\r\nconst Heading = styled.h1`\r\n\tfont-size: 3rem;\r\n`\r\n\r\nclass App extends Component {\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\trobots: [],\r\n\t\t\tsearchfield: ''\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t\t.then(response => response.json())\r\n\t\t\t.then(users => {\r\n\t\t\t\tthis.setState({ robots: users })\r\n\t\t\t})\r\n\t}\r\n\r\n\tonSearchChange = event => {\r\n\t\tthis.setState({ searchfield: event.target.value })\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { robots, searchfield } = this.state\r\n\t\tconst filteredRobots = robots.filter(robot => {\r\n\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase())\r\n\t\t})\r\n\t\treturn !robots.length ? (\r\n\t\t\t<h1>Loading</h1>\r\n\t\t) : (\r\n\t\t\t<Wrapper>\r\n\t\t\t\t<Heading>Cute Little Monsters</Heading>\r\n\t\t\t\t<SearchBox searchChange={this.onSearchChange} />\r\n\t\t\t\t<CardList robots={filteredRobots} />\r\n\t\t\t</Wrapper>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default App\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}